/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Community;
import model.Encounter;
import model.EncounterHistory;
import model.House;
import model.Patient;
import model.PatientDirectory;

/**
 *
 * @author gyt
 */
public class PatientPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientPanel
     */
    EncounterHistory history;
    String com;
    int cal = 0;
    
    
    public PatientPanel(EncounterHistory history,String com) {
        initComponents();
        this.history = history;
        this.com = com;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPatiName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPatientAge = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPatientSSN = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtHouseID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDoctorName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEncounterDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSystolic = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDiastolic = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnShow = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        lblNumber = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient Age", "Patient SSN", "House id", "Doctor Name", "Encounter date", "Systolic", "Diastolic"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Patient Name:");

        jLabel2.setText("Patient Age:");

        jLabel3.setText("Patient SSN:");

        jLabel4.setText("House ID:");

        jLabel5.setText("Doctor Name:");

        jLabel6.setText("Encounter Date:");

        jLabel7.setText("Systolic:");

        jLabel8.setText("Diastolic:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel9.setText("Show the patient with abnormal blood pressure:");

        btnShow.setText("show");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        jLabel10.setText("There are ");

        lblNumber.setText("00");

        jLabel11.setText("patients having abnormal blood pressure.");

        jLabel12.setText("Search by patient SSN:");

        txtSSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSSNActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnBack.setText("back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAdd.setText("Add New");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnView)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(80, 80, 80))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtPatiName, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPatientSSN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtDoctorName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtSystolic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnShow)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtEncounterDate, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtHouseID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPatientAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel11))
                        .addContainerGap(240, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(171, 171, 171)
                                .addComponent(btnAdd)
                                .addGap(51, 51, 51)
                                .addComponent(btnUpdate)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel12)))
                        .addGap(82, 82, 82))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(lblNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch)
                        .addGap(150, 150, 150))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(313, 313, 313))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPatiName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPatientSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtHouseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtEncounterDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSystolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtDiastolic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(btnShow))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(lblNumber))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(5, 5, 5)))
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBack)
                .addGap(7, 7, 7))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectRowIndex = jTable1.getSelectedRow();
       if(selectRowIndex<0){
           JOptionPane.showMessageDialog(this, "Please select a row to delete.");
           return;
       }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Encounter encounter = (Encounter)model.getValueAt(selectRowIndex, 0);
        
        txtPatiName.setText(encounter.getPatient().getName());
        txtPatientAge.setText(String.valueOf(encounter.getPatient().getAge()));
        txtPatientSSN.setText(String.valueOf(encounter.getPatient().getSSN()));
        txtHouseID.setText(String.valueOf(encounter.getPatient().getHouse().getHouseid()));
        txtDoctorName.setText(encounter.getPatient().getDoctorName());
        txtSystolic.setText(String.valueOf(encounter.getSystolic()));
        txtDiastolic.setText(String.valueOf(encounter.getDiastolic()));
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        Date date = encounter.getEncounterDate();
        txtEncounterDate.setText(ft.format(date));
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtSSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSSNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSSNActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
       int selectRowIndex = jTable1.getSelectedRow();
       if(selectRowIndex<0){
           JOptionPane.showMessageDialog(this, "Please select a row to delete.");
           return;
       }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Encounter encounter = (Encounter)model.getValueAt(selectRowIndex, 0);
        history.deleteEncounter(encounter);
        JOptionPane.showMessageDialog(this, "Encounter deleted.");
        populateTable();
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        // TODO add your handling code here:
        ArrayList<Encounter>  encounterlist = new ArrayList<>();
        ArrayList<Patient> patientlist = new ArrayList<>();
        for(Encounter encounter:history.getEncounterList()){
            if(encounter.getSystolic()>=140&&encounter.getDiastolic()>=90&&com.equals(encounter.getPatient().getHouse().getCommunity().getComName())){
            encounterlist.add(encounter);
            patientlist.add(encounter.getPatient());
            }
         }
        
        for(int i =0;i<patientlist.size()-1;i++){
            for(int j=patientlist.size()-1;j>i;j--){
                if(patientlist.get(i).equals(patientlist.get(j)))
                    patientlist.remove(j);
            }
        }
        
        cal = patientlist.size();
        lblNumber.setText(String.valueOf(cal));
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        for(Encounter encounter:encounterlist){
            
            Object[] row = new Object[8];
            row[0] = encounter;
            row[1] = encounter.getPatient().getAge();
            row[2] = encounter.getPatient().getSSN();
            row[3] = encounter.getPatient().getHouse().getHouseid();
            row[4] = encounter.getPatient().getDoctorName();
            SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
            Date date = encounter.getEncounterDate();
            row[5] = ft.format(date);
            row[6] = encounter.getSystolic();
            row[7] = encounter.getDiastolic();
            
            model.addRow(row);
        
        }
        
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        List<Encounter> encounterlist = history.getEncounterList();
        int selectRowIndex = jTable1.getSelectedRow();
        if(selectRowIndex<0){
           JOptionPane.showMessageDialog(this, "Please select a row to update.");
           return;
       }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Encounter encounter = (Encounter)model.getValueAt(selectRowIndex, 0);
        history.deleteEncounter(encounter);
        String patientName = txtPatiName.getText();
        if(patientName.equals("")){
            JOptionPane.showMessageDialog(this, "The patient name cannot be null.");
            return;
        }
        
        int patientAge = Integer.parseInt(txtPatientAge.getText());
        int ssn = Integer.parseInt(txtPatientSSN.getText());
        if(String.valueOf(ssn).length()!=9){
            JOptionPane.showMessageDialog(this, "Please type the right SSN.");
            return;
        }
        
        int houseid = Integer.parseInt(txtHouseID.getText());
        String doctorName = txtDoctorName.getText();
        int systolic = Integer.parseInt(txtSystolic.getText());
        int diastolic = Integer.parseInt(txtDiastolic.getText());
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        String sdate = txtEncounterDate.getText();
        Date date = new Date();
        try {
            date = ft.parse(sdate);
        } catch (ParseException ex) {
            Logger.getLogger(PatientPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Please enter the correct date format");
        }

        Encounter nencounter = new Encounter();
        Patient patient = new Patient();
        House house = new House();
        Community community = new Community();

        nencounter.setDiastolic(diastolic);
        nencounter.setEncounterDate(date);
        nencounter.setSystolic(systolic);
        patient.setAge(patientAge);
        patient.setDoctorName(doctorName);
        patient.setName(patientName);
        patient.setSSN(ssn);
        house.setHouseid(houseid);
        community.setCityName("boston");
        community.setComName(com);
        house.setCommunity(community);
        patient.setHouse(house);
        nencounter.setPatient(patient);
        history.addEncounter(nencounter);

        JOptionPane.showMessageDialog(this, "data updated.");

        txtDiastolic.setText("");
        txtEncounterDate.setText("YYYY-MM-DD");
        txtDoctorName.setText("");
        txtEncounterDate.setText("");
        txtHouseID.setText("");
        txtPatiName.setText("");
        txtPatientAge.setText("");
        txtPatientSSN.setText("");
        txtSystolic.setText("");
        
        populateTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        String patientName = txtPatiName.getText();
        if(patientName.equals("")){
            JOptionPane.showMessageDialog(this, "The patient name cannot be null.");
            return;
        }
        
        int patientAge = Integer.parseInt(txtPatientAge.getText());
        int ssn = Integer.parseInt(txtPatientSSN.getText());
        if(String.valueOf(ssn).length()!=9){
            JOptionPane.showMessageDialog(this, "Please type the right SSN.");
            return;
        }
        
        int houseid = Integer.parseInt(txtHouseID.getText());
        String doctorName = txtDoctorName.getText();
        int systolic = Integer.parseInt(txtSystolic.getText());
        int diastolic = Integer.parseInt(txtDiastolic.getText());
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        String sdate = txtEncounterDate.getText();
        Date date = new Date();
        try {
            date = ft.parse(sdate);
        } catch (ParseException ex) {
            Logger.getLogger(PatientPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Please enter the correct date format");
        }

        Encounter nencounter = new Encounter();
        Patient patient = new Patient();
        House house = new House();
        Community community = new Community();

        nencounter.setDiastolic(diastolic);
        nencounter.setEncounterDate(date);
        nencounter.setSystolic(systolic);
        patient.setAge(patientAge);
        patient.setDoctorName(doctorName);
        patient.setName(patientName);
        patient.setSSN(ssn);
        house.setHouseid(houseid);
        community.setCityName("boston");
        community.setComName(com);
        house.setCommunity(community);
        patient.setHouse(house);
        nencounter.setPatient(patient);
        history.addEncounter(nencounter);

        JOptionPane.showMessageDialog(this, "data updated.");

        txtDiastolic.setText("");
        txtEncounterDate.setText("YYYY-MM-DD");
        txtDoctorName.setText("");
        txtEncounterDate.setText("");
        txtHouseID.setText("");
        txtPatiName.setText("");
        txtPatientAge.setText("");
        txtPatientSSN.setText("");
        txtSystolic.setText("");
        
        populateTable();
        
        
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int ssn = Integer.parseInt(txtSSN.getText());
        ArrayList<Encounter>  ssnlist = new ArrayList<>();
        for(Encounter encounter:history.getEncounterList()){
            if(encounter.getPatient().getSSN() == ssn){
            ssnlist.add(encounter);
            }
         }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        for(Encounter encounter:ssnlist){
            
            if(com.equals(encounter.getPatient().getHouse().getCommunity().getComName())){
            Object[] row = new Object[8];
            row[0] = encounter;
            row[1] = encounter.getPatient().getAge();
            row[2] = encounter.getPatient().getSSN();
            row[3] = encounter.getPatient().getHouse().getHouseid();
            row[4] = encounter.getPatient().getDoctorName();
            SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
            Date date = encounter.getEncounterDate();
            row[5] = ft.format(date);
            row[6] = encounter.getSystolic();
            row[7] = encounter.getDiastolic();
            
            
            model.addRow(row);
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        for(Encounter encounter:history.getEncounterList()){
            if(com.equals(encounter.getPatient().getHouse().getCommunity().getComName())){
            Object[] row = new Object[8];
            row[0] = encounter;
            row[1] = encounter.getPatient().getAge();
            row[2] = encounter.getPatient().getSSN();
            row[3] = encounter.getPatient().getHouse().getHouseid();
            row[4] = encounter.getPatient().getDoctorName();
            SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
            Date date = encounter.getEncounterDate();
            row[5] = ft.format(date);
            row[6] = encounter.getSystolic();
            row[7] = encounter.getDiastolic();
            
            
            model.addRow(row);
        }
        }
        //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JTextField txtDiastolic;
    private javax.swing.JTextField txtDoctorName;
    private javax.swing.JTextField txtEncounterDate;
    private javax.swing.JTextField txtHouseID;
    private javax.swing.JTextField txtPatiName;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientSSN;
    private javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtSystolic;
    // End of variables declaration//GEN-END:variables
}
